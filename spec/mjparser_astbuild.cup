package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, MINUS, EQUAL, VOID, COLON;
terminal Integer NUMBER;
terminal String BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;
terminal IF, ELSE;
terminal ASTERISK, SLASH, PERCENT, DOT;
terminal DEQUALS, NEQUAL, GEQUAL, LEQUAL, GREATER, LESS;
terminal NEW;
terminal DAMPERSAND, DVBAR;
terminal DPLUS, DMINUS;
terminal DO, WHILE, SWITCH, CASE, BREAK, CONTINUE, READ;
terminal CONST, EXTENDS;
terminal ENUM, QMARK, CLASS;

nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;

nonterminal Declaration Declaration;
nonterminal MethodType MethodType;
nonterminal DesignatorStatement DesignatorStatement; 
nonterminal VarDeclList VarDeclList;
nonterminal DesignatorFactor DesignatorFactor;
nonterminal MinusSign MinusSign; 

nonterminal DeclarationList DeclarationList;
nonterminal ClassDecl ClassDecl;
nonterminal VarDeclSemi VarDeclSemi;
nonterminal ConstDecl ConstDecl;
nonterminal Constant Constant;
nonterminal Extending Extending;
nonterminal MethodDeclBlock MethodDeclBlock;
nonterminal ConstDeclSemi ConstDeclSemi;
nonterminal SwitchCaseList SwitchCaseList;
nonterminal Condition Condition;
nonterminal Assignop Assignop;
nonterminal VarNoType VarNoType;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Mulop Mulop;
nonterminal Relop Relop;
nonterminal VarDeclarationBlock VarDeclarationBlock;
nonterminal StatementBlock StatementBlock;
nonterminal BraceMethodDeclBlock BraceMethodDeclBlock;

nonterminal DesignatorName DesignatorName;
nonterminal LeftParen LeftParen;
nonterminal Qmark Qmark;
nonterminal Colon Colon;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Type, Term, Factor, Expr, Designator, NewFactor, UnsignedExpr, Expr1;

Program ::= (Program) PROG ProgName:p DeclarationList:D1 LBRACE MethodDeclBlock:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclarationList ::= (MultiDeclaration) DeclarationList:D1 Declaration:D2 {: RESULT=new MultiDeclaration(D1, D2); RESULT.setLine(D1left); :}
						|
					(SingleDeclaration) Declaration:D1 {: RESULT=new SingleDeclaration(D1); RESULT.setLine(D1left); :}
						;

Declaration ::= (VarDeclaration) VarDeclSemi:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
					|
				(ConstDeclaration) ConstDeclSemi:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
					|
				(ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :}
					//|
				 //error SEMI:g
			   	 //{: parser.report_error("Izvrsen oporavak do ; u liniji " + gleft, null);  :} /* greska globalna def */
					;

ConstDeclSemi ::= (ConstDeclSemi) ConstDecl:C1 SEMI {: RESULT=new ConstDeclSemi(C1); RESULT.setLine(C1left); :};

ConstDecl ::= (MultiConstDecl) ConstDecl:C1 COMMA IDENT:constName EQUAL Constant:cnst {: RESULT=new MultiConstDecl(C1, constName, cnst); RESULT.setLine(C1left); :}
				|
			  (SingleConstDecl) CONST Type:constType IDENT:constName EQUAL Constant:cnst {: RESULT=new SingleConstDecl(constType, constName, cnst); RESULT.setLine(constTypeleft); :}
			  	;  		
			  	
Constant ::= (NumberCon) NUMBER:num {: RESULT=new NumberCon(num); RESULT.setLine(numleft); :}
				|
			  (CharCon) CHARCONST:chr {: RESULT=new CharCon(chr); RESULT.setLine(chrleft); :}
			  	|
			  (BoolCon) BOOLCONST:bol {: RESULT=new BoolCon(bol); RESULT.setLine(bolleft); :}
			  	;
			  	
VarDeclSemi ::= (VarDeclSemicolon) VarDeclList:V1 SEMI {: RESULT=new VarDeclSemicolon(V1); RESULT.setLine(V1left); :};

VarDeclList ::= (MultiVarDecl) VarDeclList:V1 COMMA VarNoType:V2 {: RESULT=new MultiVarDecl(V1, V2); RESULT.setLine(V1left); :}
					|
				(SingleVar) VarDecl:V1 {: RESULT=new SingleVar(V1); RESULT.setLine(V1left); :}
					|
				 error:o
			   	 {: parser.report_error("Izvrsen oporavak do , ili ; u liniji " + oleft, null);  :} {: RESULT=new VarDeclListDerived1(); :} /* greska globalna def */
					;
	
VarDecl ::= (VarWithType) Type:T1 VarNoType:V2 {: RESULT=new VarWithType(T1, V2); RESULT.setLine(T1left); :};
				
VarNoType ::= (VarIdentSingle) IDENT:varName {: RESULT=new VarIdentSingle(varName); RESULT.setLine(varNameleft); :}
				|
			  (VarIdentArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarIdentArray(varName); RESULT.setLine(varNameleft); :}
			  	;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

ClassDecl ::= (ClassDecl) CLASS IDENT:I1 Extending:E2 LBRACE VarDeclarationBlock:V3 BraceMethodDeclBlock:B4 RBRACE {: RESULT=new ClassDecl(I1, E2, V3, B4); RESULT.setLine(I1left); :};

Extending ::= (Extended) EXTENDS Type:T1 {: RESULT=new Extended(T1); RESULT.setLine(T1left); :}
				|
			  (NotExtended) {: RESULT=new NotExtended(); :} /* epsilon */
			  	;

BraceMethodDeclBlock ::= (BMDBlock) LBRACE MethodDeclBlock:M1 RBRACE {: RESULT=new BMDBlock(M1); RESULT.setLine(M1left); :};
			  	
MethodDeclBlock ::= (MethodBlock) MethodDeclList:M1 {: RESULT=new MethodBlock(M1); RESULT.setLine(M1left); :} 
						|
					(NoMethodBlock) {: RESULT=new NoMethodBlock(); :} /* epsilon */
						;
						
MethodDeclList ::= (MultiMethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MultiMethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
						|
				   (SingleMethodDeclaration) MethodDecl:M1 {: RESULT=new SingleMethodDeclaration(M1); RESULT.setLine(M1left); :}
						;

MethodDecl ::= (MethodDeclVars) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclarationBlock:V3 LBRACE StatementBlock:S4 RBRACE {: RESULT=new MethodDeclVars(M1, F2, V3, S4); RESULT.setLine(M1left); :}
					|
			   (MethodDeclNoVars) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN LBRACE StatementBlock:S3 RBRACE {: RESULT=new MethodDeclNoVars(M1, F2, S3); RESULT.setLine(M1left); :}
					;

MethodTypeName ::= (MethodTypeName) MethodType:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :};

MethodType ::= (NonVoidType) Type:retType {: RESULT=new NonVoidType(retType); RESULT.setLine(retTypeleft); :}
				| 
			   (VoidType) VOID:retType {: RESULT=new VoidType(); :}
			   	;
			   	
VarDeclarationBlock ::= (MultiVarDeclSemi) VarDeclarationBlock:V1 VarDeclSemi:V2 {: RESULT=new MultiVarDeclSemi(V1, V2); RESULT.setLine(V1left); :}
							|
						(SingleVarDeclSemi) VarDeclSemi:V1 {: RESULT=new SingleVarDeclSemi(V1); RESULT.setLine(V1left); :}
							; 

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} 
				| 
			 (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ 
			 	;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
						|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
						;
					
FormalParamDecl ::= (FormalParamDecl1) Type:T1 IDENT:I2 {: RESULT=new FormalParamDecl1(T1, I2); RESULT.setLine(T1left); :} 
						|
					(FormalParamDecl2) Type:T1 IDENT:I2 LBRACKET RBRACKET {: RESULT=new FormalParamDecl2(T1, I2); RESULT.setLine(T1left); :}
						;

StatementBlock ::= (StmtBlck) StatementList:S1 {: RESULT=new StmtBlck(S1); RESULT.setLine(S1left); :} 
					|
				   (NoStmtBlck) {: RESULT=new NoStmtBlck(); :} /* epsilon */
				  	;

StatementList ::= (MultiStatement) StatementList:S1 Statement:S2 {: RESULT=new MultiStatement(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (SingleStatement) Statement:S1 {: RESULT=new SingleStatement(S1); RESULT.setLine(S1left); :}
				  	;
			  
Statement ::= (Assignment) DesignatorStatement:dest SEMI {: RESULT=new Assignment(dest); RESULT.setLine(destleft); :} 
			  |
			 error SEMI:l
		   	 {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new StatementDerived1(); :} /* iskaz dodele */
		   	  |
			(PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :} 
			  |
			(DoWhileStmt) DO StatementBlock:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhileStmt(S1, C2); RESULT.setLine(S1left); :}
			  |
			(ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  ;

SwitchCaseList ::=  (MultiCase) SwitchCaseList:S1 CASE NUMBER:N2 COLON StatementList:S3 {: RESULT=new MultiCase(S1, N2, S3); RESULT.setLine(S1left); :}
						| 
				    (SingleCase) CASE NUMBER:N1 COLON StatementList:S2 {: RESULT=new SingleCase(N1, S2); RESULT.setLine(N1left); :}
				    	;

DesignatorStatement ::= (AssignmentExpr) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new AssignmentExpr(D1, A2, E3); RESULT.setLine(D1left); :}
							|
						error SEMI:g
			   	 		{: parser.report_error("Izvrsen oporavak do ; u liniji " + gleft, null);  :} {: RESULT=new DesignatorStatementDerived1(); :} /* greska iskaz dodele */		
							|					
						(Increment) Designator:D1 DPLUS {: RESULT=new Increment(D1); RESULT.setLine(D1left); :}
							|
						(Decrement) Designator:D1 DMINUS {: RESULT=new Decrement(D1); RESULT.setLine(D1left); :}
							;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   	;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
					;

Condition ::= (MultiCondTerm) Condition:C1 DVBAR CondTerm:C2 {: RESULT=new MultiCondTerm(C1, C2); RESULT.setLine(C1left); :}
				|
			  (SingleCondTerm) CondTerm:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
			  	;

CondTerm ::= (MultiCondFact) CondTerm:C1 DAMPERSAND CondFact:C2 {: RESULT=new MultiCondFact(C1, C2); RESULT.setLine(C1left); :}
				|
			 (SingleCondFact) CondFact:C1 {: RESULT=new SingleCondFact(C1); RESULT.setLine(C1left); :}
			 	;

CondFact ::= (ExprCondFact) Expr:E1 {: RESULT=new ExprCondFact(E1); RESULT.setLine(E1left); :}
				|
			 (ERECondFact) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ERECondFact(E1, R2, E3); RESULT.setLine(E1left); :}
			 	; 

Expr ::= (NormalExpr) Expr1:E1 {: RESULT=new NormalExpr(E1); RESULT.setLine(E1left); :}
			|
		 (TernaryExpr) Expr1:E1 Qmark:Q2 Expr1:first Colon:C3 Expr1:second {: RESULT=new TernaryExpr(E1, Q2, first, C3, second); RESULT.setLine(E1left); :} /* revizirano */
		 	;

Qmark ::= (Qmark) QMARK {: RESULT=new Qmark(); :};

Colon ::= (Colon) COLON {: RESULT=new Colon(); :};


Expr1 ::= (PosExpr1) UnsignedExpr:U1 {: RESULT=new PosExpr1(U1); RESULT.setLine(U1left); :}
			|
		  (NegExpr1) MINUS UnsignedExpr:U1 {: RESULT=new NegExpr1(U1); RESULT.setLine(U1left); :}
		  	;
		 	
UnsignedExpr ::= (AddExpr) UnsignedExpr:U1 Addop:A2 Term:T3 {: RESULT=new AddExpr(U1, A2, T3); RESULT.setLine(U1left); :}
		  			|		  		 	
		 		 (TermExpr) Term:T1 {: RESULT=new TermExpr(T1); RESULT.setLine(T1left); :}
		 			;

Term ::= (FactorMulopTerm) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new FactorMulopTerm(T1, M2, F3); RESULT.setLine(T1left); :} 
			|
		 (FactorTerm) Factor:F1 {: RESULT=new FactorTerm(F1); RESULT.setLine(F1left); :}
		 	;

Factor ::= (Var) Designator:D1 {: RESULT=new Var(D1); RESULT.setLine(D1left); :}
			|
		   (NumConst) NUMBER:num {: RESULT=new NumConst(num); RESULT.setLine(numleft); :}
		   	|
		   (CharConst) CHARCONST:chr {: RESULT=new CharConst(chr); RESULT.setLine(chrleft); :}
		   	|
		   (BoolConst) BOOLCONST:bl {: RESULT=new BoolConst(bl); RESULT.setLine(blleft); :}
		   	|
		   (New) NewFactor:N1 {: RESULT=new New(N1); RESULT.setLine(N1left); :}
		   	|
		   (ParenExpr) LeftParen:L1 Expr:E2 RPAREN {: RESULT=new ParenExpr(L1, E2); RESULT.setLine(L1left); :}
		   	;
		   	
LeftParen ::= (LeftParen) LPAREN {: RESULT=new LeftParen(); :};

DesignatorFactor ::= (DesignatorActPars) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new DesignatorActPars(D1, A2); RESULT.setLine(D1left); :};

NewFactor ::= (NewFactorSingle) NEW Type:T1 {: RESULT=new NewFactorSingle(T1); RESULT.setLine(T1left); :}
				|
			  (NewFactorArray) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewFactorArray(T1, E2); RESULT.setLine(T1left); :}	
			  	;


Designator ::= (DesignatorIndex) DesignatorName:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorIndex(D1, E2); RESULT.setLine(D1left); :} 
				|
			   (SingleDesignator) DesignatorName:D1 {: RESULT=new SingleDesignator(D1); RESULT.setLine(D1left); :}
				;
				
DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};
					
Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

Relop ::= (Equalop) DEQUALS {: RESULT=new Equalop(); :}
			|
		  (NotEqualop) NEQUAL {: RESULT=new NotEqualop(); :}
		  	|
		  (Greaterop) GREATER {: RESULT=new Greaterop(); :}
		  	|
		  (GreaterEqualsop) GEQUAL {: RESULT=new GreaterEqualsop(); :}
		  	| 
		  (Lessop) LESS {: RESULT=new Lessop(); :}
		   	| 
		  (LessEqualop) LEQUAL {: RESULT=new LessEqualop(); :}
		  	;  

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :} 
			| 
		  (Subtractop) MINUS {: RESULT=new Subtractop(); :}
		  	;
			
Mulop ::= (Mulop) ASTERISK {: RESULT=new Mulop(); :}
		 	| 
		  (Divideop) SLASH {: RESULT=new Divideop(); :}
		 	| 
		  (Modop) PERCENT {: RESULT=new Modop(); :} 
		  	;